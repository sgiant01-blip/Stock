import os
import pandas as pd
import numpy as np
# import FinanceDataReader as fdr 
# import datetime, time
import pandas_ta as ta
from tqdm.auto import tqdm
from datetime import datetime

# ──────────────────────────────────────────────────
# 설정
# ──────────────────────────────────────────────────
FILE_IN      = 'DataKRX.csv'
FILE_NAME    = 'TA_values.KRX'
PARQUET_FILE = FILE_NAME + '.parquet'
CSV_FILE     = FILE_NAME + '.csv'
DATE_COL     = 'Date'
lengths      = range(2, 10)

# ──────────────────────────────────────────────────
# 1) 과거 결과 로드
# ──────────────────────────────────────────────────
if os.path.exists(PARQUET_FILE):
    df_old = pd.read_parquet(PARQUET_FILE)
    df_old = df_old.loc[:, ~df_old.columns.duplicated()]
    last_date = df_old[DATE_COL].max()
else:
    df_old = pd.DataFrame()
    last_date = datetime(1900, 1, 1)

# ──────────────────────────────────────────────────
# 2) 신규 데이터 로드, 종목·날짜 정렬, 필터
# ──────────────────────────────────────────────────
df_raw = pd.read_csv(FILE_IN, parse_dates=[DATE_COL], encoding='utf-8-sig')
required_cols = [
    'Code', 'Date', 'Open', 'High',
    'Low', 'Close', 'Volume',
    'Change', 'Stage']

df_raw = df_raw.dropna(subset=required_cols).reset_index(drop=True)
df_raw['Date']  = pd.to_datetime(df_raw['Date'])
df_raw['Stage'] = df_raw['Stage'].astype('category')

df_raw = df_raw.sort_values(['Code', DATE_COL]).reset_index(drop=True)
df_new = df_raw[df_raw[DATE_COL] > last_date].reset_index(drop=True)
if df_new.empty:
    print("신규 데이터가 없습니다. 종료합니다.")
    exit()

#추세 지표
kind = '추세'
taName = 'Aroon'
dfs = dfsA.copy()
dfs2 = pd.DataFrame()   

for i in lengths :
    dfs2 = ta.aroon(high = dfs['High'], low = dfs['Low'], length = i)
    dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "DMI"
for i in lengths :
    dfs2 = ta.dm(high = dfs['High'], low = dfs['Low'], length = i)
    dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "ElderRay"
for i in lengths :
    dfs2 = ta.eri(high = dfs['High'], low = dfs['Low'], close = dfs['Close'], length = i)
    dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "ForceIndex"
for i in lengths :
    dfs["fIndex-" + str(i)] = ta.efi(close = dfs['Close'], volume = dfs['Volume'], length = i)

taName = "MA"
for i in lengths :
    dfs['EMA-' + str(i)] = ta.ema(close = dfs['Close'], length = i)
    dfs['Vol-' + str(i)] = ta.ema(close = dfs['Volume'], length = i)

taName = "ROC"
for i in lengths :
    dfs['ROC-' + str(i)] = ta.roc(dfs['Close'], length = i)

#추세 전환
kind = "추세전환"
taName = "PSAR"
dfs2 = ta.psar(high = dfs['High'], low = dfs['Low'])
dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "NVI"
for i in lengths :
    dfs['NVI-' + str(i)] = ta.nvi(close = dfs['Close'], volume = dfs['Volume'], length = i) 

#모멘텀
kind = "모멘텀"
taName = "CMF"
for i in lengths :
    dfs["CMF-" + str(i)] = ta.cmf(dfs['High'], dfs['Low'], dfs['Close'], dfs['Volume'], length = i)

taName = "PPO"
for i in lengths :
    dfs2 = ta.ppo(dfs['Close'], fast = i*1.3, slow = i*3, signal = i)
    dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "PVO"
for i in lengths :
    dfs2 = ta.pvo(volume = dfs['Volume'], fast = i*1.3, slow = i*2.6, signal = i)
    dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "RSI"
for i in lengths :
    dfs2 = ta.rsi(dfs['Close'], length = i)
    dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "sStochastic"
for i in lengths :
    dfs2 = ta.stoch(high = dfs['High'], low = dfs['Low'], close = dfs['Close'], k= i, d= 3, smooth_k=3)
    dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "sRSI"
for i in lengths :
    dfs2 = ta.stochrsi(dfs['Close'], length = i, rsi_length = i, k = 3, d = 3)
    dfs = pd.concat([dfs, dfs2],axis = 1)

taName="TRIX"
for i in lengths :
    dfs2 = ta.trix(dfs['Close'], length = i*2, signal = i)
    dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "UO"
for i in lengths :
    dfs["UO-" + str(i)] = ta.uo(high = dfs['High'], low = dfs['Low'], close = dfs['Close'], fast=i, medium = i*2, slow=i*3)

taName = "WillR"
for i in lengths :
    dfs["WillR-" + str(i)] = ta.willr(high = dfs['High'], low = dfs['Low'], close = dfs['Close'], length = i)

taName = "PSI"
for i in lengths :
    dfs["PSI-" + str(i)] =ta.psl(close = dfs['Close'], length = i)

taName = "Disparity"                # 이격도
for i in lengths :
    dfs['MA-' + str(i)] = ta.ema(close=dfs['Close'], length=i)
    dfs['Disparity-' + str(i)] = dfs['Close'] - dfs['MA-' + str(i)]

taName = "ADX"
for i in lengths :
    dfs2 = ta.adx(high = dfs['High'], low = dfs['Low'], close = dfs['Close'], length= i)
    dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "CCI"
for i in lengths :
    dfs["CCI-" + str(i)] = ta.cci(high = dfs['High'], low = dfs['Low'], close = dfs['Close'], length = i)

taName = "MACD"
for i in lengths :
    dfs2 = ta.macd(dfs['Close'], fast = i*1.3, slow = i*3, signal = i)
    dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "MassIndex"
for i in lengths :
    dfs['mIndex-' + str(i)] = ta.massi(high = dfs['High'], low = dfs['Low'], fast = i, slow = i*2.5)

kind = "시장강도"
taName = "ADline"
dfs["ADLine"] = ta.ad(dfs['High'], dfs['Low'], dfs['Close'], dfs['Volume'])

taName = "CO"       # Chaikin Oscillator
for i in lengths :
    dfs["CO-" + str(i)] = ta.adosc(dfs['High'], dfs['Low'], dfs['Close'], dfs['Volume'],  fast =3, slow  = i*2)

taName = "EOM"
for i in lengths :
    dfs["EOM-" + str(i)] = ta.eom(high = dfs['High'], low = dfs['Low'], close = dfs['Close'], volume = dfs['Volume'], length = i)

taName = "OBV"
dfs['OBV'] = ta.obv(close = dfs['Close'], volume = dfs['Volume'])

taName = "PVT"
dfs['PVT'] = ta.pvt(close = dfs['Close'], volume = dfs['Volume'])

taName = "VolumeRatio"
for i in lengths :
    dfs['AvgVol'] = ta.sma(dfs['Volume'], length=i)
    dfs['VRatio' + str(i)] = dfs['Volume'] / dfs['AvgVol']

#변동성
kind = "Volatity"
taName = "ATR"
for i in lengths :
    dfs["ATR-" + str(i)] = ta.atr(high = dfs['High'], low = dfs['Low'], close = dfs['Close'], length = i)

taName = "BB"
for i in lengths :
    dfs2 = ta.bbands(dfs['Close'], length = i)
    dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "dChannel"             #돈치안 채널(Donchian Channel)
dfs2 =ta.donchian(high = dfs['High'], low = dfs['Low'])
dfs = pd.concat([dfs, dfs2],axis = 1)

taName = "kChannel"             # 켈트너 채널(Keltner Channel)
for i in lengths :
    dfs2 =ta.kc(high = dfs['High'], low = dfs['Low'], close = dfs['Close'], length = i)
    dfs = pd.concat([dfs, dfs2],axis = 1)

# 기타 (지지 저항)
kind = "지지 저항"
taName = "Pivot Point"
dfs['Pivot'] = (dfs['High'].shift(1) + dfs['Low'].shift(1) + dfs['Close'].shift(1)) / 3
dfs['Pivot_R1'] = (2 * dfs['Pivot']) - dfs['Low'].shift(1)
dfs['Pivot_S1'] = (2 * dfs['Pivot']) - dfs['High'].shift(1)
dfs['Pivot_R2'] = dfs['Pivot'] + (dfs['High'].shift(1) - dfs['Low'].shift(1))
dfs['Pivot_S2'] = dfs['Pivot'] - (dfs['High'].shift(1) - dfs['Low'].shift(1))

dfs.to_parquet(PARQUET_FILE, index=False)
# df_out.to_csv(CSV_FILE, index=False, encoding='utf-8-sig')

print(f"완료: 신규 {len(df_final_new)}행 추가, 총 {len(dfs)}행 저장됨.")