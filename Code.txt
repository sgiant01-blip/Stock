import pandas as pd
import numpy as np

# 1) 미래 수익률 & 평균 수익률 계산
def compute_future_returns(df, days=[1,2,3,4,5]):
    for d in days:
        df[f"ret_{d}"] = (
            df.groupby("Code")["Close"]
              .shift(-d)
              .div(df["Close"])
              .sub(1)
        )
    for d in days:
        cols = [f"ret_{i}" for i in range(1, d+1)]
        df[f"ret_avg_{d}"] = df[cols].mean(axis=1)
    return df

# 2) 중위 80% 제거 후 50개 균등 개수 세그먼트
def segment_by_rank(df, ind_col,
                    lower_pct=0.10, upper_pct=0.90, n_segments=50):
    df = df.copy()
    df["rank_pct"] = df[ind_col].rank(method="first", pct=True)
    mask = df["rank_pct"].between(lower_pct, upper_pct)
    df_mid = df[mask].copy()
    df_mid["segment"] = pd.qcut(
        df_mid[ind_col], q=n_segments, labels=False, duplicates="drop"
    )
    df = df.merge(
        df_mid[["segment"]],
        left_index=True, right_index=True,
        how="left"
    ).drop(columns="rank_pct")
    return df

# 3) 세그먼트별 메트릭 집계
def compute_segment_metrics(df, indicators, days=[1,2,3,4,5],
                            lower_pct=0.10, upper_pct=0.90, n_segments=50):
    records = []
    for ind in indicators:
        df_ind = segment_by_rank(
            df, ind_col=ind,
            lower_pct=lower_pct, upper_pct=upper_pct,
            n_segments=n_segments
        )
        df_ind[f"{ind}_dir"] = df_ind[ind].diff() > 0

        for d in days:
            ret_col = f"ret_avg_{d}"
            grp = (
                df_ind
                .dropna(subset=["segment", f"{ind}_dir", ret_col])
                .groupby(["Stage", "segment"])
            )
            agg = grp.agg(
                total_count = ("segment",    "size"),
                pos_match   = (f"{ind}_dir", "sum"),
                mean_return = (ret_col,      "mean"),
                neg3_count  = (ret_col,      lambda x: (x <= -0.03).sum()),
                min_return  = (ret_col,      "min")
            ).reset_index()
            agg["pos_ratio"]  = agg["pos_match"]  / agg["total_count"]
            agg["neg3_ratio"] = agg["neg3_count"] / agg["total_count"]
            agg["indicator"]  = ind
            agg["day"]        = d
            records.append(agg)

    return pd.concat(records, ignore_index=True)

# ──────────────────────────────────────────────────────────────────────

# 파이프라인 실행 예시

# A) 데이터 로드 및 기본 전처리
df = pd.read_parquet("TA_values.All.parquet")
df["Date"] = pd.to_datetime(df["Date"])
df.reset_index(drop=True, inplace=True)

df = compute_future_returns(df, days=[1,2,3,4,5])

# 자동 추출한 지표 리스트로 분석
seg_metrics = compute_segment_metrics(
    df,
    indicators=indicator_cols,
    days=[1,2,3,4,5],
    lower_pct=0.10,
    upper_pct=0.90,
    n_segments=50
)

print(seg_metrics.head())
